snake.py
import logging
import random
from constants import GRID_SIZE
# Configure logging 
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

class Snake:
    def __init__(self, initial_position):
        self.body = [initial_position]
        self.direction = (0, 1)
        self.grow_flag = False
        self.lifetime = 0
        self.score = 0
        self.moves = 200
        self.max_moves = 500
        self.fitness = 0
        self.previous_positions = []
        self.loop_penalty = 0
        self.visited_positions = set()
        self.last_food_position = initial_position
        #logging.debug(f"Initialized snake at position {initial_position}")

    def set_direction(self, new_direction):
        self.direction = new_direction
        #logging.debug(f"Set new direction to {new_direction}")

    def move(self):
        self.lifetime += 1
        self.moves -= 1
        head_x, head_y = self.body[0]
        new_head = (head_x + self.direction[0], head_y + self.direction[1])
        self.body.insert(0, new_head)

        if not self.grow_flag:
            self.body.pop()
        else:
            self.grow_flag = False

        if len(self.previous_positions) > 50:
            self.previous_positions.pop(0)
        self.previous_positions.append(new_head)

        # Calculate loop penalty based on recent positions
        self.loop_penalty = self.previous_positions.count(new_head) - 1

        self.visited_positions.add(new_head)

        logging.debug(f"Move - New head position: {new_head}, Direction: {self.direction}, Lifetime: {self.lifetime}, Moves left: {self.moves}")

    def grow(self):
        self.grow_flag = True
        self.previous_positions = []
        self.loop_penalty = 0
        self.moves = min(self.moves + 100, self.max_moves)
        #logging.debug(f"Grew, new moves count: {self.moves}")

    def check_collision(self, grid_size):
        head_x, head_y = self.body[0]
        if not (0 <= head_x < grid_size and 0 <= head_y < grid_size):
            return True
        if (head_x, head_y) in self.body[1:]:
            return True
        return False

    def look(self, food, grid_size):
        vision = []
        directions = [
            (-1, 0), (1, 0), (0, -1), (0, 1),
            (-1, -1), (-1, 1), (1, -1), (1, 1)
        ]

        for direction in directions:
            vision.extend(self.look_in_direction(direction, food, grid_size))
        return vision

    def look_in_direction(self, direction, food, grid_size):
        look = [0, 0, 0]
        pos = [self.body[0][0], self.body[0][1]]
        distance = 0
        
        while 0 <= pos[0] < grid_size and 0 <= pos[1] < grid_size:
            pos[0] += direction[0]
            pos[1] += direction[1]
            distance += 1

            if (pos[0], pos[1]) == food:
                look[0] = 1 / distance
            if (pos[0], pos[1]) in self.body[1:]:
                look[1] = 1 / distance

        look[2] = 1 / distance
        return look

    def calculate_fitness(self, food_position):
        # Base fitness for surviving each frame
        base_fitness = self.lifetime * 5

        # Reward for eating food
        food_reward = self.score * 5000

        # Reward for moving towards food
        head_x, head_y = self.body[0]
        food_x, food_y = food_position
        initial_distance_to_food = abs(head_x - food_x) + abs(head_y - food_y)
        current_distance_to_food = initial_distance_to_food

        for segment in self.body:
            distance_to_food = abs(segment[0] - food_x) + abs(segment[1] - food_y)
            if distance_to_food < current_distance_to_food:
                current_distance_to_food = distance_to_food

        move_towards_food_reward = (initial_distance_to_food - current_distance_to_food) * 100

        # Penalty for collisions
        collision_penalty = 0
        if self.check_collision(GRID_SIZE):
            collision_penalty = -300

        # Penalty for looping behavior
        loop_penalty = -self.loop_penalty * 50

        # Calculate total fitness
        total_fitness = base_fitness + food_reward + move_towards_food_reward + collision_penalty + loop_penalty

        # Ensure fitness is not negative
        self.fitness = max(total_fitness, 0)

        logging.debug(f"Fitness calculation - Base: {base_fitness}, Food: {food_reward}, "
                    f"Move towards food: {move_towards_food_reward}, Collision: {collision_penalty}, "
                    f"Loop penalty: {loop_penalty}, Total: {total_fitness}")

        return self.fitness


    def replay_move(self, food):
        self.lifetime += 1
        head_x, head_y = self.body[0]
        new_head = (head_x + self.direction[0], head_y + self.direction[1])
        self.body.insert(0, new_head)

        if not self.grow_flag:
            self.body.pop()
        else:
            self.grow_flag = False

        if self.body[0] == food:
            self.grow()
            if self.food_positions:
                food = self.food_positions.pop(0)
            else:
                self.replay = False
        return food


------------------------------------------------------------------------------------------------------------------------------

game.py
import logging
import random
from snake import Snake
import numpy as np
from constants import GRID_SIZE, SNAKE_SIZE, WHITE, RED
import pygame 

# Configure logging
#logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

class SnakeGame:
    def __init__(self, render=True):
        initial_position = (GRID_SIZE // 2, GRID_SIZE // 2)
        self.snake = Snake(initial_position)
        self.food = self.place_food()  # Place the first food at a random position
        self.score = 0
        self.neural_network = None
        self.render = render

    def place_food(self):
        while True:
            food_pos = (random.randint(0, GRID_SIZE - 1), random.randint(0, GRID_SIZE - 1))
            if food_pos not in self.snake.body:
                return food_pos

    def update(self):
        if self.neural_network:
            vision = self.snake.look(self.food, GRID_SIZE)
            prediction = self.neural_network.forward(np.array(vision).reshape(-1, 1))
            move = np.argmax(prediction)
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]  # Right, Left, Down, Up

            current_direction = self.snake.direction
            new_direction = directions[move]

            # Ensure the snake does not make a 180-degree turn
            if (current_direction == (0, 1) and new_direction != (0, -1)) or \
            (current_direction == (0, -1) and new_direction != (0, 1)) or \
            (current_direction == (1, 0) and new_direction != (-1, 0)) or \
            (current_direction == (-1, 0) and new_direction != (1, 0)):

                self.snake.set_direction(new_direction)

        self.snake.move()
        if self.snake.check_collision(GRID_SIZE) or self.snake.moves <= 0:
            return False  # Game over
        
        if self.snake.body[0] == self.food:
            self.snake.grow()
            self.food = self.place_food()
            self.score += 1

        return True  # Continue the game

    def draw(self, screen):
        if self.render:
            # Draw game grid
            grid_width = SNAKE_SIZE * GRID_SIZE
            grid_height = SNAKE_SIZE * GRID_SIZE
            game_x_offset = 300  # Offset for the game grid
            pygame.draw.rect(screen, WHITE, [game_x_offset, 0, grid_width, grid_height], 2)

            # Draw snake
            for segment in self.snake.body:
                pygame.draw.rect(screen, WHITE, 
                                (game_x_offset + segment[1] * SNAKE_SIZE, segment[0] * SNAKE_SIZE, SNAKE_SIZE, SNAKE_SIZE))
            
            # Draw food
            pygame.draw.rect(screen, RED, 
                            (game_x_offset + self.food[1] * SNAKE_SIZE, self.food[0] * SNAKE_SIZE, SNAKE_SIZE, SNAKE_SIZE))


-------------------------------------------------------------------------------------------------------------------------------

genetic_algorithm.py

import logging
import numpy as np
import random
from copy import deepcopy
from neural_network import NeuralNetwork
import asyncio

# Configure logging
#logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(message)s')


async def evaluate_network(network, game_class, games_per_network, render=False):
    total_score = 0
    for _ in range(games_per_network):
        game = game_class(render=render)
        game.neural_network = deepcopy(network)

        while game.update():
            await asyncio.sleep(0)  # Yield control to the event loop

        fitness = game.snake.calculate_fitness(game.food)
        if fitness is not None:
            total_score += fitness
            #logging.debug(f"Fitness for this game: {fitness}")

    avg_score = total_score / games_per_network if games_per_network else 1
    #logging.debug(f"Average fitness: {avg_score}")
    return avg_score


class GeneticAlgorithm:
    def __init__(self, population_size=500, mutation_rate=0.1, batch_size=50, elitism_rate=0.05, max_generations=500):
        self.population_size = population_size
        self.mutation_rate = mutation_rate
        self.batch_size = batch_size
        self.elitism_rate = elitism_rate
        self.population = [NeuralNetwork() for _ in range(population_size)]
        self.fitness_scores = []
        self.generation = 0
        self.max_generations = max_generations

    async def evaluate_fitness(self, game_class, games_per_network=1):
        self.fitness_scores = []

        # Divide population into batches
        batches = [self.population[i:i + self.batch_size] for i in range(0, self.population_size, self.batch_size)]

        for batch in batches:
            tasks = [asyncio.create_task(evaluate_network(network, game_class, games_per_network, render=False)) for network in batch]
            results = await asyncio.gather(*tasks)
            self.fitness_scores.extend(results)

        self.fitness_scores = np.array(self.fitness_scores)
        if np.sum(self.fitness_scores) > 0:
            self.fitness_scores = self.fitness_scores / np.sum(self.fitness_scores)
        else:
            logging.warning("Sum of fitness scores is zero or negative. Check fitness calculation.")

    def tournament_selection(self, tournament_size=30):
        # Randomly select a subset of individuals for the tournament
        tournament = random.sample(list(zip(self.population, self.fitness_scores)), tournament_size)
        # Select the best individual in the tournament
        best_individual = max(tournament, key=lambda x: x[1])[0]
        return best_individual

    def crossover(self, parent1, parent2):
        child1, child2 = deepcopy(parent1), deepcopy(parent2)
        for i in range(len(parent1.weights)):
            crossover_point = random.randint(0, parent1.weights[i].shape[1] - 1)
            child1.weights[i][:, :crossover_point], child2.weights[i][:, :crossover_point] = \
                deepcopy(parent2.weights[i][:, :crossover_point]), deepcopy(parent1.weights[i][:, :crossover_point])
        return child1, child2

    def crossover(self, parent1, parent2):
        child1, child2 = deepcopy(parent1), deepcopy(parent2)
        
        # Adaptive Crossover Strategy: Choose based on generation count
        for i in range(len(parent1.weights)):
            # Early generations: More exploratory
            if self.generation < self.max_generations / 2:
                if random.choice([True, False]):
                    # Single-point crossover
                    crossover_point = random.randint(0, parent1.weights[i].shape[1] - 1)
                    child1.weights[i][:, :crossover_point], child2.weights[i][:, :crossover_point] = \
                        deepcopy(parent2.weights[i][:, :crossover_point]), deepcopy(parent1.weights[i][:, :crossover_point])
                else:
                    # Two-point crossover
                    point1, point2 = sorted(random.sample(range(parent1.weights[i].shape[1]), 2))
                    child1.weights[i][:, point1:point2], child2.weights[i][:, point1:point2] = \
                        deepcopy(parent2.weights[i][:, point1:point2]), deepcopy(parent1.weights[i][:, point1:point2])
            # Later generations: More exploitative
            else:
                if random.choice([True, False]):
                    # Single-point crossover towards the middle
                    crossover_point = parent1.weights[i].shape[1] // 2
                    child1.weights[i][:, :crossover_point], child2.weights[i][:, :crossover_point] = \
                        deepcopy(parent2.weights[i][:, :crossover_point]), deepcopy(parent1.weights[i][:, :crossover_point])
                else:
                    # Single-point crossover towards the end
                    crossover_point = parent1.weights[i].shape[1] - 1
                    child1.weights[i][:, :crossover_point], child2.weights[i][:, :crossover_point] = \
                        deepcopy(parent2.weights[i][:, :crossover_point]), deepcopy(parent1.weights[i][:, :crossover_point])
                    
            # Domain-Specific Crossover
            if i == 0:  # Input layer to first hidden layer: more conservative
                crossover_point = random.randint(0, parent1.weights[i].shape[1] // 2)
                child1.weights[i][:, :crossover_point], child2.weights[i][:, :crossover_point] = \
                    deepcopy(parent2.weights[i][:, :crossover_point]), deepcopy(parent1.weights[i][:, :crossover_point])
            elif i == len(parent1.weights) - 1:  # Last hidden layer to output layer: more aggressive
                crossover_point = random.randint(parent1.weights[i].shape[1] // 2, parent1.weights[i].shape[1] - 1)
                child1.weights[i][:, :crossover_point], child2.weights[i][:, :crossover_point] = \
                    deepcopy(parent2.weights[i][:, :crossover_point]), deepcopy(parent1.weights[i][:, :crossover_point])

        return child1, child2

    def mutate(self, network):
            for i in range(len(network.weights)):
                if random.random() < self.mutation_rate:
                    noise = np.random.randn(*network.weights[i].shape) * 0.5 * (1 - self.generation / self.max_generations)
                    network.weights[i] += noise
            # logging.debug("Mutated network")
            return network

    def create_new_generation(self):
        new_population = []

        # Elitism: Retain top-performing individuals
        num_elites = int(self.elitism_rate * self.population_size)
        elite_indices = np.argsort(self.fitness_scores)[-num_elites:]
        elites = [self.population[i] for i in elite_indices]
        new_population.extend(elites)

        while len(new_population) < self.population_size:
            parent1 = self.tournament_selection()
            parent2 = self.tournament_selection()
            child1, child2 = self.crossover(parent1, parent2)
            new_population.append(self.mutate(child1))
            if len(new_population) < self.population_size:
                new_population.append(self.mutate(child2))

        self.population = new_population[:self.population_size]
        self.generation += 1

-----------------------------------------------------------------------------------------------------------------------------------------

main.py
import pygame
import numpy as np
from game import SnakeGame
from genetic_algorithm import GeneticAlgorithm
from visualization import display_interface
from button_f import Button_b  # Import the button class
from constants import SCREEN_WIDTH, SCREEN_HEIGHT, SNAKE_SIZE
import asyncio
import logging

increase_mut_button = pygame.Rect(340, 85, 20, 20)
decrease_mut_button = pygame.Rect(365, 85, 20, 20)

async def visualize_snake(screen, gen_alg, network, generation, snake_size, highscore, human_control=False):
    game = SnakeGame()
    game.neural_network = network

    running = True
    clock = pygame.time.Clock()
   

    while running and game.update():
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if increase_mut_button.collidepoint(event.pos):
                    gen_alg.mutation_rate *= 2
                elif decrease_mut_button.collidepoint(event.pos):
                    gen_alg.mutation_rate /= 2
                elif save_button.is_clicked(event):
                    pass
                elif load_button.is_clicked(event):
                    pass
                elif human_control_button.is_clicked(event):
                    human_control = not human_control  # Toggle human control mode

        if human_control:
            keys = pygame.key.get_pressed()
            if keys[pygame.K_UP]:
                game.snake.set_direction((-1, 0))
            if keys[pygame.K_DOWN]:
                game.snake.set_direction((1, 0))
            if keys[pygame.K_LEFT]:
                game.snake.set_direction((0, -1))
            if keys[pygame.K_RIGHT]:
                game.snake.set_direction((0, 1))

        score = game.score
        highscore = max(highscore, game.score)
        
        head_pos = game.snake.body[0]
        #logging.debug(f"Best snake head position: {head_pos}, direction: {game.snake.direction}")

        display_interface(screen, game, network, generation + 1, score, highscore, gen_alg.mutation_rate, snake_size)
        clock.tick(15)  # Adjust this value to change the snake's speed
        await asyncio.sleep(0)  # Yield control to the event loop

    return highscore

async def run_genetic_algorithm(gen_alg, generations, screen):
    highscore = 0

    for generation in range(generations):
        print(f"Generation {generation + 1}/{generations}")
        await gen_alg.evaluate_fitness(SnakeGame)
        gen_alg.create_new_generation()

        best_index = np.argmax(gen_alg.fitness_scores)
        best_network = gen_alg.population[best_index]
        
        #logging.debug(f"Generation {generation + 1}: Best fitness score: {gen_alg.fitness_scores[best_index]} at index {best_index}")

        highscore = await visualize_snake(screen, gen_alg, best_network, generation, SNAKE_SIZE, highscore, human_control=False)

async def main():
    pygame.init()  # Initialize Pygame here
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.display.set_caption('Snake AI Evolution')

    global save_button, load_button, human_control_button
    save_button = Button_b(149, 15, 100, 30, "Save")
    load_button = Button_b(249, 15, 30, 100, "Load")
    human_control_button = Button_b(449, 15, 150, 30, "Human Control")
    
    gen_alg = GeneticAlgorithm(population_size=2000)  # Increase the population size
    generations = 500  # Number of generations for the demonstration

    await run_genetic_algorithm(gen_alg, generations, screen)

    pygame.quit()

if __name__ == '__main__':
    asyncio.run(main())



---------------------------------------------------------------------------------------------------------------------------------------------------

visualization.py
# visualization.py

import pygame
from constants import GRID_SIZE, SNAKE_SIZE, WHITE, BLACK, GREEN, RED, BLUE, GRAY

def display_game(screen, game, snake_size):
    # Draw game grid
    grid_width = snake_size * GRID_SIZE
    grid_height = snake_size * GRID_SIZE
    game_x_offset = 300  # Offset for the game grid
    pygame.draw.rect(screen, WHITE, [game_x_offset, 0, grid_width, grid_height], 2)

    # Draw snake
    for segment in game.snake.body:
        pygame.draw.rect(screen, WHITE, 
                         (game_x_offset + segment[1] * snake_size, segment[0] * snake_size, snake_size, snake_size))
    
    # Draw food
    pygame.draw.rect(screen, RED, 
                     (game_x_offset + game.food[1] * snake_size, game.food[0] * snake_size, snake_size, snake_size))

def display_stats(screen, generation, score, highscore, mutation_rate):
    font = pygame.font.Font(None, 36)
    gen_text = font.render(f"Generation: {generation}", True, WHITE)
    score_text = font.render(f"Score: {score}", True, WHITE)
    highscore_text = font.render(f"High Score: {highscore}", True, WHITE)
    mut_text = font.render(f"Mutation Rate: {mutation_rate:.1%}", True, WHITE)

    screen.blit(gen_text, (10, 10))
    screen.blit(score_text, (10, 50))
    screen.blit(highscore_text, (10, 90))
    screen.blit(mut_text, (10, 130))

def draw_neural_network(screen, network, start_x, start_y, width, height):
    layers = [network.layer_sizes[0]] + network.layer_sizes[1:-1] + [network.layer_sizes[-1]]
    layer_width = width // len(layers)

    node_radius = 10  # Radius of each node
    max_nodes = max(layers)

    for l, layer_size in enumerate(layers):
        layer_x = start_x + l * layer_width + layer_width // 2
        spacing_y = height // (layer_size + 1)

        for n in range(layer_size):
            node_y = start_y + n * spacing_y + spacing_y // 2
            pygame.draw.circle(screen, WHITE, (layer_x, node_y), node_radius)

            if l < len(layers) - 1:
                next_layer_size = layers[l + 1]
                next_layer_x = start_x + (l + 1) * layer_width + layer_width // 2
                next_spacing_y = height // (next_layer_size + 1)

                for nn in range(next_layer_size):
                    next_node_y = start_y + nn * next_spacing_y + next_spacing_y // 2

                    weight = network.weights[l][nn, n]
                    color = RED if weight < 0 else BLUE
                    pygame.draw.line(screen, color, (layer_x, node_y), (next_layer_x, next_node_y))

def display_interface(screen, game, network, generation, score, highscore, mutation_rate, snake_size):
    screen.fill(BLACK)
    
    # Define panel dimensions
    panel_width = 300
    panel_height = screen.get_height()
    panel_x = 0
    panel_y = 0

    # Draw panel background
    pygame.draw.rect(screen, GRAY, [panel_x, panel_y, panel_width, panel_height])

    # Display neural network and stats in the panel
    draw_neural_network(screen, network, 10, 200, panel_width - 20, panel_height - 240)
    display_stats(screen, generation, score, highscore, mutation_rate)

    # Display game grid on the right
    display_game(screen, game, snake_size)
    
    pygame.display.update()

-----------------------------------------------------------------------------------------------------------------------

neural_network.py
import numpy as np

def relu(x):
    return np.maximum(0, x)

class NeuralNetwork:
    def __init__(self, input_size=24, hidden_layer_sizes=[16, 16], output_size=4):
        self.layer_sizes = [input_size] + hidden_layer_sizes + [output_size]
        self.weights = [np.random.randn(y, x) for x, y in zip(self.layer_sizes[:-1], self.layer_sizes[1:])]
        self.biases = [np.random.randn(y, 1) for y in self.layer_sizes[1:]]

    def forward(self, x):
        activation = x
        for w, b in zip(self.weights, self.biases):
            z = np.dot(w, activation) + b
            activation = relu(z)  # ReLU activation
        return activation

    def predict(self, x):
        output = self.forward(x)
        return np.argmax(output)


